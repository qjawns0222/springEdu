<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	<!--  <bean id="tv" class="tommy.spring.polymorphism.SamsungTV" c:speaker-ref="sony" c:price="150" />
	<bean id="sony" class="tommy.spring.polymorphism.SonySpeaker" />
	<bean id="apple" class="tommy.spring.polymorphism.AppleSpeaker" />
-->

	<!-- <bean id="collectionBean" class="tommy.spring.collection.CollectionBean">
		<property name="addressList">
			<set value-type="java.lang.String">
			<value>스트링</value>
			<value>소오</value>
			<value>기리</value>
			<value>구라</value>
			</set>
		</property>
	</bean> -->
	
	<!-- <context:component-scan base-package="tommy.spring.polymorphism"></context:component-scan>
	<bean id="apple" class="tommy.spring.polymorphism.AppleSpeaker"/> -->
	<context:component-scan base-package="tommy.spring.web"></context:component-scan>
	<!-- 
	<bean id="userService" class="tommy.spring.web.user.impl.UserServiceImpl">
		<property name="userDAO" ref="userDAO"/>
	</bean>
	<bean id="userDAO" class="tommy.spring.web.user.impl.UserDAO"></bean>
 -->
	<!-- <bean id="log" class="tommy.spring.web.common.Log4JAdvice"></bean>
	<bean id="before" class="tommy.spring.web.common.BeforeAdvice"></bean>
	<bean id="afterReturning" class="tommy.spring.web.common.AfterReturningAdvice"></bean>
	<bean id="around" class="tommy.spring.web.common.AroundAdvice"></bean>
	<bean id="afterThrowing" class="tommy.spring.web.common.AfterThrowingAdvice"></bean>
	<aop:config>
		<aop:pointcut expression="execution(* tommy.spring.web..*Impl.*(..))" id="allPointcut"/> 
		<aop:pointcut expression="execution(* tommy.spring.web..*Impl.get*(..))" id="getPointcut"/>
		<aop:aspect ref="afterReturning">
			<aop:after-returning method="afterLog" pointcut-ref="getPointcut" returning="returnObj" />
		</aop:aspect>
	</aop:config> -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	<context:property-placeholder location="classpath:config/database.properties"/>
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}"	/>						 
		<property name="url" value="${jdbc.url}"	/>						 
		<property name="username" value="${jdbc.username}"	/>						 
		<property name="password" value="${jdbc.password}"	/>						 
	</bean>
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut expression="execution(* tommy.spring.web..*(..))" id="txPointcut"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
	</aop:config>
	<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
	</bean>
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sessionFactory"/>
	</bean>

</beans>
